# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# run every hour
schedules:
- cron: 30 * * * *
  displayName: Hourly Run 
  always: true
  branches:
    include:
    - main
    
pool:
  name: 'MemoBuild-Pool'

variables:
  EnableQuickBuildCachePlugin: false
  MSBuildDropName: memobuild-msbuild-17.6-vc/2023.08.04.2
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  MsBuildDropTarget: c:\msbuild
  # SDL
  Codeql.Enabled: false
  runCodesignValidationInjection: false
  skipComponentGovernanceDetection: true
  skipNugetSecurityAnalysis: true
  # perf
  VSO_DEDUP_REDIRECT_TIMEOUT_IN_SEC: 5

strategy:
  matrix:
    # x64-baseline-drop:
    #   Platform: x64
    #   MSBuildCacheEnabled: false
    #   InstallVs: false
    #   VsDevCmd: '$(MsBuildDropTarget)\Common7\Tools\VsDevCmd.bat'
    # arm64-baseline-drop:
    #   Platform: arm64
    #   MSBuildCacheEnabled: false
    #   InstallVs: false
    #   VsDevCmd: '$(MsBuildDropTarget)\Common7\Tools\VsDevCmd.bat'
    # x64-MSBuildCache-drop:
    #   Platform: x64
    #   MSBuildCacheEnabled: true
    #   InstallVs: false
    #   VsDevCmd: '$(MsBuildDropTarget)\Common7\Tools\VsDevCmd.bat'
    # arm64-MSBuildCache-drop:
    #   Platform: arm64
    #   MSBuildCacheEnabled: true
    #   InstallVs: false
    #   VsDevCmd: '$(MsBuildDropTarget)\Common7\Tools\VsDevCmd.bat'
    x64-baseline-vs:
      Platform: x64
      MSBuildCacheEnabled: false
      InstallVs: true
      VsDevCmd: 'C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat'
    arm64-baseline-vs:
      Platform: arm64
      MSBuildCacheEnabled: false
      InstallVs: true
      VsDevCmd: 'C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat'
    x64-MSBuildCache-vs:
      Platform: x64
      MSBuildCacheEnabled: true
      InstallVs: true
      VsDevCmd: 'C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat'
    arm64-MSBuildCache-vs:
      Platform: arm64
      MSBuildCacheEnabled: true
      InstallVs: true
      VsDevCmd: 'C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat'
      

steps:
- checkout: self
  submodules: recursive
# clean up
- script: git clean -xdf
- script: IF EXIST \MSBuildCacheCache (rmdir /s /q \MSBuildCacheCache)
# set up env (vs preview)
- script: |
   cd %TEMP%
   del vs_Professional.exe
   
   echo https://github.com/microsoft/winget-pkgs/pull/124370
   curl.exe https://download.visualstudio.microsoft.com/download/pr/edd57c24-4450-4df0-807b-73cd92961610/4e675e65a68999962836aba83780478ff27d1032403a40802b3214d3e9d18142/vs_Professional.exe -o vs_Professional.exe
   
   vs_Professional.exe --passive --norestart --wait --config %CD%\.vsconfig
   set VS_ERRORLEVEL=%ERRORLEVEL%
   del vs_Professional.exe
   
   IF "%VS_ERRORLEVEL%"=="0" (
     echo install success: %VS_ERRORLEVEL%
     exit /b 0
   )
   IF "%VS_ERRORLEVEL%"=="3010" (
     echo install success: %VS_ERRORLEVEL%
     exit /b 0
   )

   echo install fail: %VS_ERRORLEVEL%

   CALL $(VsDevCmd)
   msbuild --version
  displayName: 'Install VS Preview'
  condition: eq(variables.InstallVs, 'true')

# set up env (drop)
- task: Cache@2
  displayName: 'Cache MSBuild Drop'
  condition: eq(variables.InstallVs, 'false')
  inputs:
    key: '"$(MSBuildDropName)"'
    path: '$(MsBuildDropTarget)'
    cacheHitVar: 'MSBUILD_RESTORED'
- task: ms-vscs-artifact.build-tasks.artifactDropDownloadTask-1.artifactDropDownloadTask@1
  displayName: 'Download MSBuild Drop'
  inputs:
    dropServiceURI: 'https://mseng.artifacts.visualstudio.com/DefaultCollection'
    buildNumber: '$(MSBuildDropName)'
    destinationPath: '$(MsBuildDropTarget)'
  condition: and(eq(variables.InstallVs, 'false'), ne(variables.MSBUILD_RESTORED, 'true'))


- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    useGlobalJson: true
- script: dotnet nuget locals http-cache -c
- task: BatchScript@1
  displayName: VsDevCmd.bat
  inputs:
    filename: $(VsDevCmd)
    modifyEnvironment: true

# restore
- task: Cache@2
  displayName: 'cache nuget packages'
  inputs:
    key: '"nuget"'
    path: '$(NUGET_PACKAGES)'
# tools
- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'
- script: curl.exe https://dist.nuget.org/win-x86-commandline/v6.7.0/nuget.exe -o tools\nuget.exe
  displayName: 'acquire nuget'
# restore MSBuildCache
- script: tools\nuget restore packages.config -SolutionDirectory .
  displayName: 'nuget restore MSBuildCache'
  condition: eq(variables.MSBuildCacheEnabled, 'true')
# restore
- script: tools\nuget restore .\PowerToys.sln
  displayName: 'nuget restore'
- script: 'MSBuild.exe /t:Restore /bl:$(Build.ArtifactStagingDirectory)\Logs\restore.binlog /p:Platform=arm64'
  displayName: Restore

# build
- script: MSBuild.exe /graph /restore:false /nr:false /reportfileaccesses /bl:$(Build.ArtifactStagingDirectory)\Logs\msbuild.binlog /p:Configuration=Release
  displayName: Build
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

# logs
- script: move MSBuildCacheLogs $(Build.ArtifactStagingDirectory)\Logs\
  displayName: 'Capture MSBuildCacheLogs'
  continueOnError: true
  condition: eq(variables.MSBuildCacheEnabled, 'true')
- task: PublishPipelineArtifact@1
  displayName: 'Publish Logs'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\Logs'
    artifact: '$(System.JobDisplayName) Logs'
  condition: always()
- task: PublishPipelineArtifact@1
  displayName: 'Capture everything on failure'
  inputs:
    targetPath: '$(Build.SourcesDirectory)'
    artifact: '$(System.JobDisplayName)'
  condition: failed()